Sins in Software Development:

Not Placing Code in a File Reversion System

Okay. Let us discuss why you wasted SO MUCH TIME SOLVING

my_max.cpp wrong. You were supposed to cook a program that 

finds the maximum double and print that double. So, what

went wrong? Well, you considered the equation for

determing the equality of doubles:

abs( x - y )/max(abs(x),abs(y)) <= Epsilon

That is the optimal equation, unless either

x or y is zero, in which case you use something

else.

But the problem with you is that you proceeded

to try to solve the problem by converting doubles

inputted into a string. This is flat out WRONG

since lexicographical order is computed differently

than numerical order according to computers. Now,

you may argue that you did not truly understand that

yet, but still, you should have still known better

than to convert doubles to strings. Let me prove it.

You based your decision to convert doubles to strings

on a poor principle. The poor principle is this:

well, it is rather "hard" to make code that compares inequalities

involving doubles using only <iostream> (NOTE: The above formula

will allow you to determine if the computer can tell

the difference between doubles using standard relational

operators <, >, <=, >=), so you JUMPED TO THE CONCLUSION

THAT YOU SHOULD USE STRING BECAUSE THAT 'WAS THE ONLY WAY' 

to solve the problem. The fallacy that you should do something

just because the people in authority allowed you to.

And then your professor reminded

you the flaw in converting doubles to strings to 

determine decimal order, when in reality you

would end up determining lexicographical order instead.

Lexicographical order and decimal order are not the same

thing!


There is actually another flaw in your software developmental

thinking. You actually solved this problem in the past in

AP Computer Science A. If you read the advice of experienced

Software Developers more carefully, you would know that

you should have SAVED YOUR CODE ON A FILE REVERSION SYSTEM.

Whether that be Dropbox or GitHub. 

"But wait", you say, "I didn't read that advice yet." 

Response: You know what, you used Dropbox and you kept

school assignments and other important documents on Dropbox

for a LONG TIME, have you not? You intuitively knew having

a habit like this can rescue you from big trouble one day

because YOU NEVER KNOW WHEN YOU NEED THAT DOCUMENT AGAIN.

And sure enough you did several, several, several times.

Especially your high school transcript. 

Likewise, GitHub was founded in 2008 and you could have

stored all your code that took damn hard work to make like

for comparing doubles accurately to prevent yourself from

doing the very thing that is business suicide in the real

world: REWRITING YOUR CODE THAT ALREADY WORKS FROM SCRATCH.

If you have no idea what I am talking about, read "Things

You Should Never Do, Part I" by Joel Spolsky on his blog

Joel on Software. I will wait. And the saddest part of this

story is, you read the entire article before you even made

the mistake of trying to convert doubles to strings to compare

double inequalities in the first place. How hypocritical of you

to laugh at NetScape when you now made the same mistake.

-------------------------------------------------------------------

So I want you to IMAGINE you are the software architect of a major

software company. You were responsible for leading the coding project

designed to do the hard task of comparing doubles (NOT AN EASY TASK)

and the problem is you can use no libraries except the equivalent of

<iostream> or <string> because your software company switched to 

developing on a brand new language like Swift (Apple) or Scala (Twitter)

to adjust for SCALABILITY (the reason Apple and Twitter are pushing

their developers to switch to each language, respectively).

And then you, being the leader of the team, holler at your overworked

software developers to make the code convert doubles to strings first

and then compare them in lexicographical order... Your software developers

either yell at your boss to get you fired for being a moron or they are too

afraid because you are in a position of power (even worse). Assuming the second

option, it just so happens that the calculations you made were for a literal

mission critical venture to help launch an Internet Satellite to finally, finally

give Africa the Internet it so desperately needs (https://www.euractiv.com/section/development-policy/news/failed-rocket-was-carrying-facebook-satellite-to-give-africa-the-internet/). Or

maybe, just maybe, you are the software artichect for NASA who commanded your overworked

software developers to developed code to calculate how the Mars Rover should land

on the moon. But oops! It couldn't calculate the rate of thrust at liftoff.

And then thanks to your idiot Boolean Logic, the launch explodes literally into

complete pandemonium. And then, in a stupid attempt to save face, you blame other

successful billionaires like Elon Musk when in reality, IT IS ALL YOUR FAULT, 

especially because you solved the problem in Java before!!!

------------------------------------------------------------------------------

We have always wondered what the hell it was about Netscape that drove them into

the stupid marketing tactic of rewriting code THAT ALREADY WORKS.

We have a few good hypotheses:

1. Code is harder to read than write, even if you made it. Especially

if it is bad code. No matter how crappy the code is, as long as it

works to reasonably satisfy consumers, stick with it. It's set in soil.

Build upon it no matter how crappy the soil if you want your business TO

NOT END UP like NetScape (Joel Spolsky: Things You Should Never Do, Part

One). And let that be a warning to all of us that the first seeds of 

code that found your coding business empire ARE THE MOST IMPORTANT ONES.

They will be the 1-5% of effort throughout your company's existence that

determines the 99-95% of results for the rest of your company's lifespan.

2. They did not bother doing a good job of archiving AND documenting

code in a file reversion system. BOTH ARE EQUALLY CRITICAL TO MAKE THIS 

WORK. What is the whole point of storing your fully functional code in a

library if you can't use the Search Option to find the code you need 

(OUTSTANDING DOCUMENTATION: Lucidly explain what the code is supposed

to do for you). 

3. Stupid Boolean Logic. They figured that now they were "starting

from scratch", they would have the opportunity to make "bigger

and badder code". Indeed, a mistake many a beginning coder like

me made. Flawed Logic indeed. Instead, they could have made

simple edits to the shoddy code and turn it into GREAT CODE.

Which obviously would have taken less time now that we all

think about it.

Instead of doing that, consider what Joel Spolsky said he

did:

"...On the Juno project we spent several months rearchitecting at one point: just moving things around, cleaning them up, creating base classes that made sense, and creating sharp interfaces between the modules. But we did it carefully, with our existing code base, and we didn’t introduce new bugs or throw away working code..."

4. Or the code was "too slow". Listen to what Joel would have done to handle this:

"A second reason programmers think that their code is a mess is that it is inefficient. The rendering code in Netscape was rumored to be slow. But this only affects A SMALL PART of the project, which you can optimize or even rewrite. You don’t have to rewrite the whole thing. When optimizing for speed, 1% of the work gets you 99% of the bang."

Time-complexity algorithms are not as big a part of enterprise code as you like to think they are!

5. Or the software developers USED CRAPPY CODING CONVENTIONS, see how Joel handled the situation:

"Third, the code may be doggone ugly. One project I worked on actually had a data type called a FuckedString. Another project had started out using the convention of starting member variables with an underscore, but later switched to the more standard “m_”. So half the functions started with “_” and half with “m_”, which looked ugly. Frankly, this is the kind of thing you solve in five minutes with a macro in Emacs, not by starting from scratch."

You know what, I will let Joel Spolsky, who obviously has milestones of experience ahead of me

finish this document on our behalf:

"It’s important to remember that when you start from scratch there is ABSOLUTELY NO REASON to believe that you are going to do a better job than you did the first time. First of all, you probably don’t even have the same programming team that worked on version one, so you don’t actually have “more experience”. You’re just going to make most of the old mistakes again, and introduce some new problems that weren’t in the original version."

Anyways, these are the books you would want:

First read: https://guides.github.com/features/wikis/

Second get: Clean Code: A Handbook of Agile Software Craftsmanship

Afer reading ALL OF THAT: Code Complete 2nd ed

PUT ALL THE SOURCE CODE FILES ON GITHUB NOW!!!

Put all these Sins files on GitHub too!

----------------------------------------------------------------------------------------------------------------------------------

4/17/18
Sins in Software Development

NOT CONCENTRATING ON WHAT THE 

USER WANTS:

Rember the simple my_max.cpp

problem in PIC 10A?

You were thinking IN TERMS

OF THE WORST POSSIBLE THING

THAT COULD HAPPEN. And it

led you to conclude that

the worst thing that could

possibly happen is the 

input value is out of range

of the values of your my_max.cpp

was designed for. 

And then you figured the computer

will not be 100% accurate with

precision and accuracy so you

wasted time testing the accuracy

of relational operators. When you

realized the computer is only as

accurate and precise as 14 decimal

digits.

So then you wasted time trying to

find a method to ALWAYS ACCURATELY

AND PRECISELY CALCULATE THE DECIMAL

DIGITS even for infinite decimal 

digits.

You pretty much were not smart enough

TO RESEARCH HOW TO DO THAT instead of

figuring out in a vacuum. [ANOTHER SIN

INI ITS OWN RIGHT]. And finally on Friday,

you sezed your chance to ask him instead of

Monday like you should have.

He said: "Equality comparisions of precision

will not help you. 

Don't worry about precision."

So you just wasted a WEEK for nothing

NEXT TIME:

	CONCENTRATE ON WHAT THE USER

WANTS. AND THAT'S THE ACTUAL WORST 

THING YOU FAILED TO DO: NOT SATISFYING

WHAT THE USER WANTS!!!

IF YOU ARE NOT SURE, ASK THEM 

IMMEDIATELY.

The real reason business die is because

the business failed to satisfy customer

demands. NEVER FORGET THAT. That's why

you got YELLED AT WHEN YOU PRESENTED YOUR

RESEARCH FOr THAT VOLUNTEER ORGANIZATION.

---------------------------------------------------------------------------------------------------------------------------------

4/17/18

Sins in Software Development

Not tracing ON PAPER instead of

your mind. Remember that simple

coding problem that TA asked you

to trace:

int i = 0;

for ( ; i < 3; i++ )
	cout << i << endl;
	cout << i << endl;

You erroneously thought the result would be:

0
1
2
0

But it actually is:

0
1
2
3

And you got the wrong answer because you

traced the program in your mind INSTEAD

OF ON PAPER.

------------------------------------------------------------------------------------------------------

Sins in Software Development

Provide a hyperlink for reference.

Imagine you are working @ [x_____]

and you know you have a file that

can be of service to you. So you 

retrieve the file but your coworkers

don't get your programming language

(NOTE: TRANSLATE EACH AND EVERY

CODE YOU MAKE INTO EVERY OTHER

LANGUAGE. This will test how well

you did of DOCUMENTING YOUR CODE

CAN YOU CONCEPTUALLY UNDERSTAND

HOW YOUR CODE WORKS? AND TESTS

YOUR SYNTAX AND SEMANTICAL MASTERY

OF THAT LANGUAGE.

------------------------------------
Problem: Luhn Checksum Validation Came from "Think Like A Programmer" by V. Anton Spraul

NOT UNDERSTANDING HOW TO CONCEPTUALLY

SOLVE THE PROBLEM

THE CHECKSUM FORMULA REALLY CONFUSED

YOU BECAUSE OF THE COMMUTATIVE NATURE

OF ADDITION.

You thought that the sum would be

the same whether you validated

the checksum forwards or backwards.

Well, the following number, if

you applied the Luhn checksum,

disproves that:

123456789999

The above number is VALID

according to the Luhn checksum

formula. If you don't belive

me, check out:

https://www.dcode.fr/luhn-algorithm

and find out for yourself

that they did it right.

Let me prove it:

1	2	3	4	5	6	7	8	9	9	9	9
1	4	3	8	5	12	7	16	9	18	9	18
1   +	4   +	3   +	8   +	5   +	1+2  +	7   +	1+6  +	9   +	1+8  + 	9   +	1+8 = 74 % 10 != 0

---->	---->	---->	---->	---->	---->	---->	---->	---->	---->	---->	---->

First of, all you did this calculation left to right. 

You thought the validation works from left to right.

NO, it works right to left. Go visit that link.

It works RIGHT TO LEFT.

Now, the real question is HOW DID YOU MESS UP

ON THE PROBLEM THAT YOU COPIED VERBATIM ON

NOTEBOOK PAPER. I think this disproves

copying the problem verbatim helps. 

ONLY RESTATING THE PROBLEM IN YOUR OWN 

WORDS DOES. But even trying to 

restate the problem in your own words,

which you tried to do, proved

insufficient. After all, you

misunderstood the problem.

The biggest question of this sad story

is: How Will you Prevent Misunderstanding

How to Solve the Problem Conceptually?

By doing this:

Imagine you are an instructor and it

is your job to determine if a student

can correctly solve a problem on paper.

What kinds of problems should you test

the student on. Write those inputs down

as test questions. 

Now ask yourself seriously, if my student

got a 100% on that test, would I reasonably

believe the student would always be able

to solve those problems correctly.

Do those exact test problems yourself and

compare your results with that of a program

to ensure you yourself understand how to do

the problem. These test problems will

be the tests in your smart_tests!

Once you proved you yourself can 

always do the problem on paper,

THERE should not be any possibility

that you will misunderstand solving

the problem by making code to do it

for you.

---------------------------------------------------------------------------------------------------------------------------

SIN: NEVER MAKE CLOSING BRACE

A PAGE AWAY FROM OPENING BRACE

You are supposed to keep functions

short for obvious reasons. Accept

the above as a rule of thumb.

Best way to implement this rule

is to break up the nasty main

method code into several, small

functions. Give the functions

a name that makes their...

function obvious.

Sin: NOT TALKING TO OTHER DEVELOPERS

I want you to try to go back to the

LINUX USERS GROUP AND TALK TO THEM

ABOUT HOW THEY MASTERED POINTERS

AND RECURSION.

One of the biggest mistakes people

make when it comes to succeed in

life is that they FORGET TO ASK

PEOPLE WITH DECADES OF EXPERIENCE

FOR HELP. The reason for this

is that we take pride in our

hard work. Screw that.

Learn from people smarter than

you so you build your aptitude.

Go ask them about their

experiences using Scala and 

Clojure.

SIN: Not WRITING YOUR TESTS

before your code. It will

prevent you from missing

edge cases.

SIN: NOT DOING PAIR PROGRAMMING

Again, remember when Thomas

Nguyen said your lack of social

skills will be the end of you.

Do you know your religion, the

people should connect, the people

who are going to push you to 

succeed. FIND SOMEONE TO CODE

WITH. BY ANY MEANS NECESSARY.

Including hanging out at 

Linux Users Group.

You have always asked yourself

WHY CAN'T I FIND ANYONE TO CODE

WITH. Dude, write down all the

evidence that you ATTEMPTED

to connect with coders no matter

what:


[BLANK SPACE BECAUSE I NEVER DID

SERIOUSLY TRY]. And yet you wonder

why you are such a loner. You have

become so ingrained with the idea

that you should only DIY that you

don't bother asking people with

experience. You are literally 

incapable of even THINKING ABOUT

THE IDEA OF FINDING SOMEONE TO

GET THINGS DONE WITH. AND THAT

Tanveer is Extreme Programming. You are literally 

incapable of even THINKING ABOUT

THE IDEA OF FINDING SOMEONE TO

GET THINGS DONE WITH. AND THAT

Tanveer is Extreme Programming.

This is the reason Mr. Todd 

Scull shook his head in

disappointment when he asked

if you ACTUALLY WORKED WITH

ENGINEERING PEOPLE TO GET SOMETHING

DONE. You keep priding in

yourself with what you can

get done all by yourself.

That is one of the reasons why

you never yet have become a

part of an excellent

extracurricular team. Perhaps

if you developed a habit of

finding people who will push

you to succeed, you would have

avoided all those tragic endings

to the useless extracurriculars

you signed up for. GAIN EXPERIENCE

with who is worthwhile to be around

and who is not by actually trying

to connect with those people.

And after all those tragic, worthless

extracurriculars you joined and didn't

get anything done in, let me give

you a hint: Tell me in one sentence,

what commodity or service that extracurricular club has 

done that has benefited society. It's 

the same question customers ask when

reviewing the quality of a product

or service. "Tell me what benefit 

did [insert product or service] do

for society" customers ask when

reviewing the quality of a product

or service. "Tell me what benefit 

did [insert product or service] do

for society".

NOT HAVING A DEFINITE CHIEF AIM:

Can you tell me, in one sentence

WHAT THE HELL IS THAT YOU WANT

TO ACCOMPLISH: Solve an undervalued

problem whose solution would be

extemely high in demand once

made yet people ignore because

of schleps blindness. Um,

so what is that undervalued

problem?

We have the following options:

1. Lack of sufficient investment

in cybersecurity. It is sad

that all sort of data breaches

are taking place. And that

is because businesses are not

willing to invest in it

sufficiently. Why, because

to them, cybersecurity is 

an expensive nuisance.

They have to pay a lot

of money for it. And

people are often delusional

on how "UP-TO-DATE" their

cybersecurity system is that

they do not bother allowing

their system to receive

the rigorous pentests they need

to lower the risk of a breach

as much as possible. Plus,

politics. Imagine you are the head

of a cybersecurity department

and a social engineer comes in

to offer their services. Sometimes

an employee's pride gets in the way

of the social engineer getting to do

their job. If the social engineer finds

a major security hole that the head of

department was supposed to take care of,

they could get fired. So they evade

asking for help from these cybersecurity

experts. ..And then a data breach happens

and they get in BIG TROUBLE anyway.

2. CompSci Education continues to be a

sad story. Far too many sutdents give up

on a CompSci education back in high school.

The problem is CompSci departments are 

oversimplying the first impressions students

receive of CompSci. Funny though, students

like in your AP CompSci class, give up

anyway. They can't even take that.

And the Java OOP was not even hard whatsoever.

You though Java OOP was easy? Pshaw.

Wait 'till you get a load of pointers

and recursive programming in college.

Those are the CS weeder courses.

No, no, no. I don't care if you work

hard. Few people have an aptitude for

this. And the best way to prevent yourself

from failing them is the following:

1. Definite Burning White Desire.

Check. But all the failures had this

too.

2. Definite Chief Aim

Check. But all the failures had this

too.

3. Definite Plan

This is where most people like you

fail at. You think the first two

are good enough. 

STOP SAYING YOU ARE

WILLING TO WORK HARD. It doesn't

matter. All that matters IS YOUR

STRATEGY to defeat the foe. 

What is your strategy to defeat

the two foes: Pointers and

Recursion. It doesn't

matter. All that matters IS 

STRATEGY to defeat the foe. 

What is your strategy to defeat

the two foes: Pointers and

Recursion.

WRITE IT DOWN HERE:

Practice a lot.

Okay now, pessimistically

test if that strategy

is actually going to work by

asking the people who are 

experienced masters of pointers

and recursion if that is going

to work.

Hmmm...I am pretty sure they are

going to say that isn't good enough.

All you are really saying is that you

are willing to work hard.

Instead of saying: practice a lot,

explain to me how you plan to MASTER

RECURSION AND POINTERS IN THE LEAST

AMOUNT OF MOVES POSSIBLE.

SIN: Buying the wrong book,

BEFORE BUYING C: The Complete

Reference: Big C++, 2nd ed.

So your professor revealed to 

you that you bought the wrong

book. You were WORRIED that

the book may have assigned

homework problems. And...

you did not bother asking

THE PRINCIPLE USER OF YOUR

CODE if they wanted the problems

in the book to be solved in 

the first place.

Next time, MAKE SURE THE USER

WANTS PROBLEMS COMING FROM

THAT SOURCE TO BE SOLVED

TO BE SOLVED, ESPEICALLY IF

THAT USER HAPPENS TO BE YOU.

Use the Carnegie Method

the next time you are stuck

in limbo over WHAT PROBLEM

your user WANTED TO GET

SOLVED.

SIN: Not conducting EXTREMELY

PESSIMISTIC OBSERVATIONAL STUDIES:

When in doubt, look at the worst

case reviews of people who were

experienced with going there and

compare.

But verify if the negative review

is reasonable, not arrogant.

"The line of code you don't write is the line of code you never have to debug."

-- Steve Jobs

This demonstrates Jobs' understanding of principles

of good coding practice. But look at the level of 

brevity in the words he said. How did he reach that

level of brevity WITHOUT ACTUALLY EVER CODING ANYTHING.

When I first started coding--I just randomly scrambled

things onto the stupid IDE until somthing actually

worked.

But the code just--worked technically. It was shoddy,

lethargic, oh and don't get me started with reading

the code. God have mercy.

But Steve does give me a serious lesson:

So your bad at qualitative and visual

spaced reasoning? Well, Tanveer before

you embark on your economic ventures

learn the art of convincing people

who have the skills---and aptitude

to do the things your subconscious

mind will not accept. And how do

you convince them to work with you

instead of at [insert World-Famous

Enterprise Here]?

What did Steve Jobs do? Convinced

Wozniak to work for his little 

startup (NOTE: DANGEROUS 90% of

startups fail). Wozniak was not

an idiot. He knew that risk.

I am certain it was because

of the opportunity to CREATE

SOMETHING OUTSTANDING that 

sovles an undervalued,

challening, MEANINGFUL,

(Read: Definite Chief

Aim) schleps

problem, whose solution would

be HIGHEST in demand once 

offered. What was the schleps

problem? Well for Woz, it was

that he wanted to use his own

computer, but computers WERE

SOOOOOOOOOOOOOOOOOOOOOOOOOOOOO

expensive back then. He just

--just had to have his own

for LESS OF A PRICE. We all

know the benefits of having

a computer. He just wanted

one that was affordable.

So he created his own.

Now, at Hewlett Packard

he obviously was not the

only person who was brilliant

like this. In fact, just as

Google is plagued with over

qualified people, so did

Woz feel a little underused,

underutilized. Such a loss

of talent. He felt. So when

Steve Jobs went up to him--

and we better believe Jobs

knew what a hacker like

Woz was looking for--he appealed

to his BURNGING WHITE AIM, 

DESIRE and PLAN to create 

an affordable computer

for the normal person.

Not just an enterprise.

It seems there is a

fundamental lesson to

be learned here. That

goes back to conciseness.

If you solve a problem in

the easiest way possible

people will buy it.

How did Woz make a personal

computer for himself when it

used to be that enterprises

only had the resources to do

so? Well, Jobs didn't know

computer science or engineering,

but he COULD IDENTIFY the person

who had:

1. A Definite Chief Aim To Do So

2. A Definite Plan to Accomplish

So

3. Whether or not they had A 

BURNING WHITE DESIRE TO DO SO

4. Persistence in Faith based

Upon Oustanding Principle

5. Evidence that the product

or service satisfied the principle.

Woz already demonstrated computer

engineering potential BY SHOWING

OFF RESULTS TO JOBS. He 

showed off toSteve Jobs

what he already had built.

Jobs had interpersonal skills but

Woz had engineering skills.

It is the person who has 

INTERPERSONAL skills.

So what problems do you like

to solve:

GAP in CS education and real-

life software engineering

practice.

Find those who would be

interested in your goals:

And remember, identify

the following in them 

by talking to them face

to face:

1. What is the their

definite chief aim?

2. What is their Definite

Plan to accomplish it?

3. What RESULTS RESULTS

RESULTS do they have to

show their plans ARE

OPTIMAL.

RUN FOR YOUR SUCCESS

TANVEER JUST AS YOU 

JOGGED. CONSIDER THE

CONCENTRATION YOU

PUT IN JOGGING A

REFLECTION OF THE KIND

OF SUCCESS YOU ARE SETTING

UP FOR YOUR SELF.

Make the Impossible Your

Boss Level. And the easiest

way to conquer the Boss is

to learn from those smarter

and more experienced.




